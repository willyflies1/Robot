/*** INCLUDES ***/
#include <IRremote.h>
#include <Servo.h>

// SERVOS
#define lh_scoop  10
#define rh_scoop  9
#define flag_r    8
#define flag_p    7

// RGB SENSOR
#define rgb_led   14
#define XXX
#define XXXX
#define XXXXX
#define XXXXXX
#define XXXXXXX

// USRF SENSORS
#define fr_trig   23
#define fr_echo   25
#define rr_trig   27
#define rr_echo   29
#define lh_trig   37
#define lh_echo   39
#define rh_trig   47
#define rh_echo   49

// MTR_CTRL + ENCODERS
// RH MTR
#define in1_rh    28
#define in2_rh    30
#define enA_rh    3
#define chA_rh
#define chB_rh

// LH MTR
#define in3_lh    24
#define in4_lh    26
#define enB_lh    4
#define chA_lh
#define chB_lh

// GENERAL I/O
#define ir_in     32
#define button    34
#define led_out   58
#define bat_in    56

// 7_SEGMENT LED PINS
#define segA      38
#define segB      36
#define segC      48
#define segD      46
#define segE      44
#define segF      40
#define segG      42
#define segDp     50

/*** ATTACH PINS ***/

IRrecv irrecv(IR_RECV_PIN);

/*** VARIABLES ***/

decode_results results;
Servo myservo1;
Servo myservo2;
int button_state = 0;
char incomingByte = 0;
/*** SETUP ***/

void setup() {
  Serial.begin(9600); // Begin Serial Monitor

  // IR Sensor
  irrecv.enableIRIn(); // Start the receiver

  // BUTTON, LED, IR, & BATTERY INPUT
  pinMode(bat_in, INPUT);
  pinMode(ir_in, INPUT);
  pinMode(button, INPUT_PULLUP);
  pinMode(led_out, OUTPUT);

  // MTR_CTRL
  pinMode(in1_rh, OUTPUT);
  pinMode(in2_rh, OUTPUT);
  pinMode(enA_rh, OUTPUT);
  pinMode(in3_lh, OUTPUT);
  pinMode(in4_lh, OUTPUT);
  pinMode(enB_lh, OUTPUT);

  // ENCODERS
  pinMode(chA_rh, INPUT);
  pinMode(chB_rh, INPUT);
  pinMode(chA_lh, INPUT);
  pinMode(chB_lh, INPUT);

  // USRF SENSORS
  pinMode(fr_trig, OUTPUT);
  pinMode(fr_echo, INPUT);
  pinMode(rr_trig, OUTPUT);
  pinMode(rr_echo, INPUT);
  pinMode(lh_trig, OUTPUT);
  pinMode(lh_echo, INPUT);
  pinMode(rh_trig, OUTPUT);
  pinMode(rh_echo, INPUT);

  // RGB SENSOR

  // 7_SEGMENT DISPLAY
  pinMode(segA, OUTPUT);
  pinMode(segB, OUTPUT);
  pinMode(segC, OUTPUT);
  pinMode(segD, OUTPUT);
  pinMode(segE, OUTPUT);
  pinMode(segF, OUTPUT);
  pinMode(segG, OUTPUT);
  pinMode(segDp, OUTPUT);

  // Lift Servos
  myservo1.attach(9);
  myservo2.attach(10);
  myservo1.write(100);
  myservo2.write(95);

  //
}

/**********************
 *     FUNCTIONS      *
 **********************/

/*** IR ***/
// Read in the IR sensor
int readIR(){
}

// Display IR reading on 7 segment
void 7_seg_disp(map_code) {
  switch (map_code)
  {
    case 0:
      digitalWrite(segA, HIGH);
      digitalWrite(segB, HIGH);
      digitalWrite(segC, HIGH);
      digitalWrite(segD, HIGH);
      digitalWrite(segE, HIGH);
      digitalWrite(segF, HIGH);
      digitalWrite(segG, LOW);
      digitalWrite(segDp, HIGH);
      break;

    case 1:
      digitalWrite(segA, LOW);
      digitalWrite(segB, HIGH);
      digitalWrite(segC, HIGH);
      digitalWrite(segD, LOW);
      digitalWrite(segE, LOW);
      digitalWrite(segF, LOW);
      digitalWrite(segG, LOW);
      digitalWrite(segDp, HIGH);
      break;

    case 2:
      digitalWrite(segA, HIGH);
      digitalWrite(segB, HIGH);
      digitalWrite(segC, LOW);
      digitalWrite(segD, HIGH);
      digitalWrite(segE, HIGH);
      digitalWrite(segF, LOW);
      digitalWrite(segG, HIGH);
      digitalWrite(segDp, HIGH);
      break;

    case 3:
      digitalWrite(segA, HIGH);
      digitalWrite(segB, HIGH);
      digitalWrite(segC, HIGH);
      digitalWrite(segD, HIGH);
      digitalWrite(segE, LOW);
      digitalWrite(segF, LOW);
      digitalWrite(segG, HIGH);
      digitalWrite(segDp, HIGH);
      break;

    case 4:
      digitalWrite(segA, LOW);
      digitalWrite(segB, HIGH);
      digitalWrite(segC, HIGH);
      digitalWrite(segD, LOW);
      digitalWrite(segE, LOW);
      digitalWrite(segF, HIGH);
      digitalWrite(segG, HIGH);
      digitalWrite(segDp, HIGH);
      break;

    case 5:
      digitalWrite(segA, HIGH);
      digitalWrite(segB, LOW);
      digitalWrite(segC, HIGH);
      digitalWrite(segD, HIGH);
      digitalWrite(segE, LOW);
      digitalWrite(segF, HIGH);
      digitalWrite(segG, HIGH);
      digitalWrite(segDp, HIGH);
      break;

    case 6:
      digitalWrite(segA, HIGH);
      digitalWrite(segB, LOW);
      digitalWrite(segC, HIGH);
      digitalWrite(segD, HIGH);
      digitalWrite(segE, HIGH);
      digitalWrite(segF, HIGH);
      digitalWrite(segG, HIGH);
      digitalWrite(segDp, HIGH);
      break;

    case 7:
      digitalWrite(segA, HIGH);
      digitalWrite(segB, HIGH);
      digitalWrite(segC, HIGH);
      digitalWrite(segD, LOW);
      digitalWrite(segE, LOW);
      digitalWrite(segF, LOW);
      digitalWrite(segG, LOW);
      digitalWrite(segDp, HIGH);
      break;
  }

/*** RGB SENSOR ***/
// Detect green LED
boolean detectGreen(){
}

/*** SCOOP ***/
// Lift the scoop up
void liftScoop(int degree){
  logging("ACTION", "Scoop Lifting");
  int i = 0;
  while(i < degree){
    degree1 = --degree1;
    degree2 = ++degree2;
    Serial.println(degree1);
    Serial.println(degree2);
    delay(100);
    i++;
  }
  myservo1.write(degree1);
  myservo2.write(degree2);
}

// Lower the scoop down
void lowerScoop(int degree){
  logging("ACTION", "Scoop Lowering");
  int i = 0;
  while(i < degree){
    degree1 = --degree1;
    degree2 = ++degree2;
    Serial.println(degree1);
    Serial.println(degree2);
    myservo1.write(degree1);
    myservo2.write(degree2);
    delay(100);
    i++;
  }
  myservo1.write(degree1);
  myservo2.write(degree2);
}

/*** NAVIGATION ***/
// Turn the robot a certain degree
void turn(int degree){
}

// Move the robot forward
void forward(int distance){
}

// Move the robot backwards
void backward(int distance){
}

// Check position
void checkPosition(){
}

/*** FLAG ***/
// Turn the flag
void turnFlag(int distance){
}

/*** OTHER ***/
// logging
void logging(String type, String message){
  Serial.print(type);
  Serial.print("=>");
  Serial.println(message);
}

/*** LOOP ***/
void loop() {
  // put your main code here, to run repeatedly:
}
